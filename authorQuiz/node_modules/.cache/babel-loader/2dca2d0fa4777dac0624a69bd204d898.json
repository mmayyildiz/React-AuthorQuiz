{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/AddAuthorForm.js\";\nimport React from 'react';\nimport \"./AddAuthorForm.css\"; // and the webpack setup in createReactApp will pick up that CSS import, do some magic, and make it all work\n\nimport { connect } from 'react-redux';\n\nclass AuthorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      imageUrl: '',\n      books: [],\n      bookTemp: '' // What this does is it guarantees that no matter how onFieldChange is called,\n      // the value of this within the method will be the same as the value of this within the constructor\n\n    };\n    this.onFieldChange = this.onFieldChange.bind(this); // must be binded in constructor other way we get Cannot read property 'props' of undefined error\n    // this.props.onAddAuthor(this.state);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleAddBook = this.handleAddBook.bind(this);\n  }\n\n  handleSubmit(event) {\n    // stop the form from being submitted\n    event.preventDefault();\n    this.props.onAddAuthor(this.state);\n  }\n\n  onFieldChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleAddBook(event) {\n    this.setState({\n      books: this.state.books.concat([this.state.bookTemp]),\n      bookTemp: ''\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"AddAuthorForm__input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      value: this.state.name,\n      onChange: this.onFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"AddAuthorForm__input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"imageUrl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Image URL\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"imageUrl\",\n      value: this.state.imageUrl,\n      onChange: this.onFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"AddAuthorForm__input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.books.map(book => React.createElement(\"p\", {\n      key: book,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, book, \" \")), React.createElement(\"label\", {\n      htmlFor: \"bookTemp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Books\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"bookTemp\",\n      value: this.state.bookTemp,\n      onChange: this.onFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"+\",\n      onClick: this.handleAddBook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n} // for is reserved js word, so htmlFor is used in jsx\n\n\nfunction AddAuthorForm({\n  match,\n  onAddAuthor\n}) {\n  return React.createElement(\"div\", {\n    className: \"AddAuthorForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Add Author\"), React.createElement(AuthorForm, {\n    onAddAuthor: onAddAuthor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n}\n\nfunction mapDispatchToProps(dispatch) {} // AddAuthorForm doesn't need to read anything from the Redux store,\n// so our mapToStore can be an empty function.\n// it does produce some actions though, or at least one action. so we do need a mapDispatchToProps function\n\n\nexport default connect(() => {}, mapDispatchToProps)(AddAuthorForm);","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/AddAuthorForm.js"],"names":["React","connect","AuthorForm","Component","constructor","props","state","name","imageUrl","books","bookTemp","onFieldChange","bind","handleSubmit","handleAddBook","event","preventDefault","onAddAuthor","setState","target","value","concat","render","map","book","AddAuthorForm","match","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"./AddAuthorForm.css\";\n// and the webpack setup in createReactApp will pick up that CSS import, do some magic, and make it all work\nimport {connect} from 'react-redux';\n\nclass AuthorForm extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            name : '',\n            imageUrl: '',\n            books : [],\n            bookTemp :  ''\n        }\n\n        // What this does is it guarantees that no matter how onFieldChange is called,\n        // the value of this within the method will be the same as the value of this within the constructor\n        this.onFieldChange = this.onFieldChange.bind(this);\n\n        // must be binded in constructor other way we get Cannot read property 'props' of undefined error\n        // this.props.onAddAuthor(this.state);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.handleAddBook = this.handleAddBook.bind(this);\n    }\n\n    handleSubmit(event){\n        // stop the form from being submitted\n         event.preventDefault();\n         this.props.onAddAuthor(this.state);\n    }\n\n    onFieldChange(event){\n        this.setState({\n           [event.target.name]: event.target.value\n        });\n    }\n\n    handleAddBook(event){\n        this.setState({\n           books: this.state.books.concat([this.state.bookTemp]),\n           bookTemp : ''\n        })\n    }\n\n    render(){\n     return <form onSubmit={this.handleSubmit}>\n               <div className=\"AddAuthorForm__input\">\n                   <label htmlFor=\"name\">Name</label>\n                   <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange}/>\n               </div>\n               <div className=\"AddAuthorForm__input\">\n                   <label htmlFor=\"imageUrl\">Image URL</label>\n                   <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange}/>\n               </div>\n               <div className=\"AddAuthorForm__input\">\n                  {this.state.books.map((book) => <p key={book}>{book} </p>)}\n                  <label htmlFor=\"bookTemp\">Books</label>\n                  <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp} onChange={this.onFieldChange}/>\n                  <input type=\"button\" value=\"+\" onClick={this.handleAddBook}/>\n               </div>\n               <input type=\"submit\" value=\"Add\"/>\n     </form>;\n    }\n}\n\n\n// for is reserved js word, so htmlFor is used in jsx\nfunction AddAuthorForm({match, onAddAuthor}){\n    return <div className=\"AddAuthorForm\">\n           <h1>Add Author</h1>\n           <AuthorForm onAddAuthor={onAddAuthor}/>\n        </div>;\n}\n\nfunction mapDispatchToProps(dispatch){\n\n}\n\n// AddAuthorForm doesn't need to read anything from the Redux store,\n// so our mapToStore can be an empty function.\n// it does produce some actions though, or at least one action. so we do need a mapDispatchToProps function\nexport default connect(()=>{}, mapDispatchToProps)(AddAuthorForm);"]},"metadata":{},"sourceType":"module"}