{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/index.js\";\nimport React from 'react'; // Model-view-intent Architecture\n// model-view-controller did not work well on the client side, new ideas gained popularity\n// model : single object that completely describes the state of the user interface\n// view : is a function that transforms the model into the user interface\n// model is the input to the view function and the user interface is the output of the view function\n// at any moment the user interface can be generated based on nothing but the model\n// when the model changes, the view function can generate the corresponding changed user interface\n// how is the model changed?\n// the UI generated by the view function can produce intents.\n// Intents are things the user wants to do\n// user selecting an answer is an intent\n// when intent is produced it is applied to the model creating an updated model\n// the updated model is then passed through the view function to produce the updated user interface\n// modal is the total source of truth. entire user interface is described by the model\n// view produces the user interface based on nothing but the model\n// model can only be changed by processing intents on the current model\n// like fsm :\n// model : possible states\n// intents : possible transitions. transtions the model from one state to the next\n\nconst model = {\n  running: false,\n  time: 110\n}; // const view = (model) => <div> {model.time} </div>;\n\nlet view = model => {\n  let minutes = Math.floor(model.time / 60);\n  let seconds = model.time - minutes * 60;\n  let secondsFormatted = \"\".concat(seconds < 10 ? '0' : '').concat(seconds);\n\n  let handler = event => {\n    model = update(model, model.running ? 'STOP' : 'START');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, minutes, \":\", secondsFormatted), React.createElement(\"button\", {\n    onClick: handler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \" \", model.running ? 'Stop' : 'Start', \" \"));\n};\n\nconst update = (model, intent) => {\n  const updates = {\n    'START': model => Object.assign(model, {\n      running: true\n    }),\n    'STOP': model => Object.assign(model, {\n      running: false\n    }),\n    'TICK': model => Object.assign(model, {\n      time: model.time + (model.running ? 1 : 0)\n    })\n  };\n  return updates[intent](model);\n};\n\nlet intents = {\n  TICK: \"TICK\",\n  START: \"START\",\n  STOP: \"STOP\",\n  RESET: \"RESET\"\n};\n\nconst render = () => {\n  ReactDOM.render(view(model), document.getElementById('root'));\n};\n\nrender();\nsetInterval(() => {\n  model = update(model, 'TICK');\n  render();\n}, 1000);","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/index.js"],"names":["React","model","running","time","view","minutes","Math","floor","seconds","secondsFormatted","handler","event","update","intent","updates","Object","assign","intents","TICK","START","STOP","RESET","render","ReactDOM","document","getElementById","setInterval"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAGA,MAAMC,KAAK,GAAG;AACXC,EAAAA,OAAO,EAAG,KADC;AAEXC,EAAAA,IAAI,EAAG;AAFI,CAAd,C,CAKA;;AAEA,IAAIC,IAAI,GAAIH,KAAD,IAAW;AACnB,MAAII,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,KAAK,CAACE,IAAN,GAAa,EAAxB,CAAd;AACA,MAAIK,OAAO,GAAGP,KAAK,CAACE,IAAN,GAAcE,OAAO,GAAG,EAAtC;AACA,MAAII,gBAAgB,aAAMD,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAA3B,SAAgCA,OAAhC,CAApB;;AACA,MAAIE,OAAO,GAAIC,KAAD,IAAW;AACrBV,IAAAA,KAAK,GAAGW,MAAM,CAACX,KAAD,EAAQA,KAAK,CAACC,OAAN,GAAgB,MAAhB,GAAyB,OAAjC,CAAd;AACF,GAFF;;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIG,OAAJ,OAAcI,gBAAd,CADK,EAEL;AAAQ,IAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA4BT,KAAK,CAACC,OAAN,GAAgB,MAAhB,GAAyB,OAArD,MAFK,CAAP;AAIF,CAZD;;AAcA,MAAMU,MAAM,GAAG,CAACX,KAAD,EAAQY,MAAR,KAAmB;AAE7B,QAAMC,OAAO,GAAG;AACb,aAAWb,KAAD,IAAWc,MAAM,CAACC,MAAP,CAAcf,KAAd,EAAqB;AAACC,MAAAA,OAAO,EAAC;AAAT,KAArB,CADR;AAEb,YAAUD,KAAD,IAAWc,MAAM,CAACC,MAAP,CAAcf,KAAd,EAAqB;AAACC,MAAAA,OAAO,EAAC;AAAT,KAArB,CAFP;AAGb,YAAUD,KAAD,IAAWc,MAAM,CAACC,MAAP,CAAcf,KAAd,EAAqB;AAACE,MAAAA,IAAI,EAAEF,KAAK,CAACE,IAAN,IAAaF,KAAK,CAACC,OAAN,GAAgB,CAAhB,GAAoB,CAAjC;AAAP,KAArB;AAHP,GAAhB;AAMA,SAAOY,OAAO,CAACD,MAAD,CAAP,CAAgBZ,KAAhB,CAAP;AACJ,CATD;;AAWA,IAAIgB,OAAO,GAAG;AACVC,EAAAA,IAAI,EAAG,MADG;AAEVC,EAAAA,KAAK,EAAG,OAFE;AAGVC,EAAAA,IAAI,EAAG,MAHG;AAIVC,EAAAA,KAAK,EAAG;AAJE,CAAd;;AAOA,MAAMC,MAAM,GAAG,MAAM;AAClBC,EAAAA,QAAQ,CAACD,MAAT,CAAgBlB,IAAI,CAACH,KAAD,CAApB,EAA6BuB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA7B;AACF,CAFD;;AAIAH,MAAM;AAENI,WAAW,CAAC,MAAM;AACdzB,EAAAA,KAAK,GAAGW,MAAM,CAACX,KAAD,EAAQ,MAAR,CAAd;AACAqB,EAAAA,MAAM;AACT,CAHU,EAGR,IAHQ,CAAX","sourcesContent":["import React from 'react';\n// Model-view-intent Architecture\n// model-view-controller did not work well on the client side, new ideas gained popularity\n// model : single object that completely describes the state of the user interface\n// view : is a function that transforms the model into the user interface\n// model is the input to the view function and the user interface is the output of the view function\n// at any moment the user interface can be generated based on nothing but the model\n// when the model changes, the view function can generate the corresponding changed user interface\n// how is the model changed?\n// the UI generated by the view function can produce intents.\n// Intents are things the user wants to do\n// user selecting an answer is an intent\n// when intent is produced it is applied to the model creating an updated model\n// the updated model is then passed through the view function to produce the updated user interface\n\n// modal is the total source of truth. entire user interface is described by the model\n// view produces the user interface based on nothing but the model\n// model can only be changed by processing intents on the current model\n\n// like fsm :\n// model : possible states\n// intents : possible transitions. transtions the model from one state to the next\n\n\nconst model = {\n   running : false,\n   time : 110\n};\n\n// const view = (model) => <div> {model.time} </div>;\n\nlet view = (model) => {\n   let minutes = Math.floor(model.time / 60);  \n   let seconds = model.time - (minutes * 60);\n   let secondsFormatted = `${seconds < 10 ? '0' : ''}${seconds}`;\n   let handler = (event) => {\n       model = update(model, model.running ? 'STOP' : 'START');\n    };\n\n   return <div>\n     <p>{minutes}:{secondsFormatted}</p>\n     <button onClick={handler}> {model.running ? 'Stop' : 'Start'} </button>\n    </div>\n};\n\nconst update = (model, intent) => {\n\n     const updates = {\n        'START' : (model) => Object.assign(model, {running:true}),\n        'STOP' : (model) => Object.assign(model, {running:false}),\n        'TICK' : (model) => Object.assign(model, {time: model.time +(model.running ? 1 : 0)})\n     };\n\n     return updates[intent](model);\n};\n\nlet intents = {\n    TICK : \"TICK\",\n    START : \"START\",\n    STOP : \"STOP\",\n    RESET : \"RESET\"\n}; \n\nconst render = () => {\n   ReactDOM.render(view(model), document.getElementById('root'));\n}\n\nrender();\n\nsetInterval(() => {\n    model = update(model, 'TICK');\n    render();\n}, 1000);\n\n"]},"metadata":{},"sourceType":"module"}