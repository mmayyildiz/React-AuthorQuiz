{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport * as serviceWorker from './serviceWorker';\nimport { shuffle, sample } from 'underscore';\n/*\nconst authors = [\n    {\n        name : 'Mark Twain',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['The Adventures of Huckleberry Finn',\n                'Life on the Missisippi',\n                'Roughing it']\n    },\n    {\n        name : 'Joseph Conrad',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['Hearth of Darkness']   \n    },\n    {\n        name : 'Stephen King',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['The Shining', 'IT']   \n    },\n    {\n        name : 'Charles Dickens',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['David Cooperfield', 'A Tale of Two Cities']   \n    },\n    {\n        name : 'William Shakespare',\n        imageUrl: 'images/authors/williamshakespare.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']   \n    },\n\n    //npm install underscore\n];\n\nfunction getTurnData(authors){\n    // concatenating each author's books into the larger set\n   const allBooks = authors.reduce(function(p, c, i){\n       return p.concat(c.books);\n   }, []);\n\n   // ilk 4'ünü al\n   const fourRandomBooks = shuffle(allBooks).slice(0,4);\n   const answer = sample(fourRandomBooks);\n\n   return{\n       books: fourRandomBooks,\n       author: authors.find((author) => \n           author.books.some((title) => \n                title === answer))\n   }\n}\n\nconst state = {\n    turnData: getTurnData(authors),\n    highlight: ''\n};\n\nfunction onAnswerSelected(answer){\n   const isCorrect = state.turnData.author.books.some((book) => book === answer);\n   state.highlight = isCorrect ? 'correct' : 'wrong';\n   render();\n}\n\nfunction render(){\n  ReactDOM.render(<AuthorQuiz {...state} onAnswerSelected={onAnswerSelected}/>, document.getElementById('root'));\n}\n\nrender();\n*/\n// import 3 identifiers from the ReactRouterDOM module\n\nconst _ReactRouterDOM = ReactRouterDOM,\n      BrowserRouter = _ReactRouterDOM.BrowserRouter,\n      Route = _ReactRouterDOM.Route,\n      Link = _ReactRouterDOM.Link;\nconst characters = {\n  \"lady-glasses\": \"https://s.pluralsight.com/authorkit/img/Gray/Geek_Female_Circle_Gray.png\",\n  \"tie-guy\": \"https://s.pluralsight.com/authorkit/img/People/Gray/Male_1_Circle_Gray.png\"\n};\n\nfunction Character({\n  match\n}) {\n  const imgUrl = characters[match.params.character].replace(/Gray/g, match.params.color);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: imgUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n}\n\nconst DashBoard = () => React.createElement(\"div\", {\n  style: {\n    width: '400px',\n    height: '400px'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"cell\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"top/left/:character/:color\",\n  component: Character,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101\n  },\n  __self: this\n})), React.createElement(\"div\", {\n  className: \"cell\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"top/right/:character/:color\",\n  component: Character,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104\n  },\n  __self: this\n})), React.createElement(\"div\", {\n  className: \"cell\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"bottom/left/:character/:color\",\n  component: Character,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n})), React.createElement(\"div\", {\n  className: \"cell\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"bottom/right/:character/:color\",\n  component: Character,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110\n  },\n  __self: this\n})));\n\nReactDOM.render( // BrowserRouter : to get the route elements to work\n// foreach character we take an array of cell positions\n// and we map those as well and then for each combination of character and position\n// we map the four possible character colors\nReact.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 121\n  },\n  __self: this\n}, React.createElement(\"aside\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 122\n  },\n  __self: this\n}, Object.keys(characters).map(name => [\"/top/left\", \"/top/right\", \"/bottom/left\", \"bottom/right\"].map(corner => [\"Gray\", \"Green\", \"Orange\", \"Purple\"].map(color => React.createElement(Link, {\n  to: '${corner}${name}/${color}',\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126\n  },\n  __self: this\n}, \" \", '${corner}${name}/${color}', \" \"))))), React.createElement(\"main\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 130\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/\",\n  component: Dashboard,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 131\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/top\",\n  render: () => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Something at the top\"),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/bottom\",\n  render: () => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Something at the bottom\"),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 133\n  },\n  __self: this\n})))), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/index.js"],"names":["React","ReactDOM","AuthorQuiz","serviceWorker","shuffle","sample","ReactRouterDOM","BrowserRouter","Route","Link","characters","Character","match","imgUrl","params","character","replace","color","DashBoard","width","height","render","Object","keys","map","name","corner","Dashboard","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport * as serviceWorker from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\n/*\nconst authors = [\n    {\n        name : 'Mark Twain',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['The Adventures of Huckleberry Finn',\n                'Life on the Missisippi',\n                'Roughing it']\n    },\n    {\n        name : 'Joseph Conrad',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['Hearth of Darkness']   \n    },\n    {\n        name : 'Stephen King',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['The Shining', 'IT']   \n    },\n    {\n        name : 'Charles Dickens',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['David Cooperfield', 'A Tale of Two Cities']   \n    },\n    {\n        name : 'William Shakespare',\n        imageUrl: 'images/authors/williamshakespare.jpg',\n        imageSource:'Wikimedia Commons',\n        books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']   \n    },\n\n    //npm install underscore\n];\n\nfunction getTurnData(authors){\n    // concatenating each author's books into the larger set\n   const allBooks = authors.reduce(function(p, c, i){\n       return p.concat(c.books);\n   }, []);\n\n   // ilk 4'ünü al\n   const fourRandomBooks = shuffle(allBooks).slice(0,4);\n   const answer = sample(fourRandomBooks);\n\n   return{\n       books: fourRandomBooks,\n       author: authors.find((author) => \n           author.books.some((title) => \n                title === answer))\n   }\n}\n\nconst state = {\n    turnData: getTurnData(authors),\n    highlight: ''\n};\n\nfunction onAnswerSelected(answer){\n   const isCorrect = state.turnData.author.books.some((book) => book === answer);\n   state.highlight = isCorrect ? 'correct' : 'wrong';\n   render();\n}\n\nfunction render(){\n  ReactDOM.render(<AuthorQuiz {...state} onAnswerSelected={onAnswerSelected}/>, document.getElementById('root'));\n}\n\nrender();\n*/\n\n// import 3 identifiers from the ReactRouterDOM module\nconst{\n    BrowserRouter, // is a component wrapper around any elements tha we want to use routes\n    Route,  // is a component that render other components based on the route path\n    Link  // is a component to use to generate a link\n}  = ReactRouterDOM;\n\nconst characters = {\n    \"lady-glasses\": \"https://s.pluralsight.com/authorkit/img/Gray/Geek_Female_Circle_Gray.png\",\n    \"tie-guy\": \"https://s.pluralsight.com/authorkit/img/People/Gray/Male_1_Circle_Gray.png\"\n};\n\nfunction Character({match}){\n    const imgUrl = characters[match.params.character].replace(/Gray/g, match.params.color);\n    return <div><img src={imgUrl} /></div>\n}\n\nconst DashBoard = () => (\n     <div style={{ width:'400px', height: '400px'}}>\n        <div className=\"cell\">\n          <Route path=\"top/left/:character/:color\" component={Character} />\n        </div>\n        <div className=\"cell\">\n          <Route path=\"top/right/:character/:color\" component={Character} />\n        </div>\n        <div className=\"cell\">\n          <Route path=\"bottom/left/:character/:color\" component={Character} />\n        </div>\n        <div className=\"cell\">\n          <Route path=\"bottom/right/:character/:color\" component={Character} />\n        </div>\n     </div>\n);\n\nReactDOM.render(\n    // BrowserRouter : to get the route elements to work\n    // foreach character we take an array of cell positions\n    // and we map those as well and then for each combination of character and position\n    // we map the four possible character colors\n    <BrowserRouter>\n     <div>\n        <aside>\n            {Object.keys(characters).map((name) =>\n                [\"/top/left\", \"/top/right\", \"/bottom/left\", \"bottom/right\"].map((corner) =>\n                   [\"Gray\", \"Green\", \"Orange\", \"Purple\"].map((color) =>\n                    <Link to={'${corner}${name}/${color}'}> {'${corner}${name}/${color}'} </Link>\n                )))}\n        </aside>\n\n        <main>\n            <Route path=\"/\" component={Dashboard}/>\n            <Route path=\"/top\" render={() => <div>Something at the top</div>}/>\n            <Route path=\"/bottom\" render={() => <div>Something at the bottom</div>}/>\n        </main>\n     </div>\n    </BrowserRouter>\n    , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}