{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/index.js\";\n// React-redux is an extra module that helps with the integration of React and Redux\n// main service : connect React components to the application state\n// can provide data from the Redux store to components when the component is rendered and \n// it can provide a way for components to publish actions that can then be used to modify the Redux store\n// Provider : is a react COMPONENT provided by React-redux\n// When it is included in a React application, it enables all React components below it in the component tree,\n// that is its children or children's children to connect to the Redux store \n// connect : FUNCTION provided by React-redux that enhances React components connecting them to the Redux Store\n// in the ways specified\n// mapStateToProps : to specify what data from the Redux store should be provided to the React component\n// as props, connect expects a parameter called mapStateToProps\n// mapStateToProps is a function from the Redux store to a set of props for the component\n// took care of getting data from the store to the component\n// mapDispatchTopProps : is a function that takes care of specifying \n// how the component can send actions to the Redux store\n// provides a place to map component events to Redux store actions\n// we will use react-redux to decouple react components from our Redux store\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport * as Redux from 'redux';\nimport * as ReactRedux from 'react-redux';\nlet model = {\n  running: false,\n  time: 110\n}; // reducer function\n\nconst update = (model = {\n  running: false,\n  time: 0\n}, action) => {\n  // React redux makes a performance optimization where before re-rendering the app\n  // it firstly checks if the app state has changed at all\n  // it does that by a reference equality check\n  // Because this update function mutates the existing model object,\n  // React-redux doesn't see that as a change to the app state, because it's still the same object\n  // So, what we need to do is make sure that reducer function always returns a new object\n  // if the app state has changed, and I can do it just providing an empty object\n  const updates = {\n    'START': model => Object.assign({}, model, {\n      running: true\n    }),\n    'STOP': model => Object.assign({}, model, {\n      running: false\n    }),\n    'TICK': model => Object.assign({}, model, {\n      time: model.time + (model.running ? 1 : 0)\n    })\n  };\n  return (updates[action.type] || (() => model))(model);\n};\n\nfunction mapStateToProps(state) {\n  // we need to think about what transformation we need from the Redux store to props for our component\n  // for this app, the answer is no transformation at all\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  // need to be able to modify the store\n  return {\n    onStart: () => {\n      dispatch({\n        type: 'START'\n      });\n    },\n    onStop: () => {\n      dispatch({\n        type: 'STOP'\n      });\n    }\n  };\n} // connect returns a function, and that function takes the react component as an argument,\n// because view is a React component we changed it with Stopwatch\n// only dependency of this component is props\n// mapping of those props to the Redux state is done via the React-redux connect function and \n// the mapStateToProps, mapDispatchToProps functions\n\n\nlet Stopwatch = ReactRedux.connect(mapStateToProps, mapDispatchToProps)(props => {\n  let minutes = Math.floor(props.time / 60);\n  let seconds = props.time - minutes * 60;\n  let secondsFormatted = \"\".concat(seconds < 10 ? '0' : '').concat(seconds);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, minutes, \":\", secondsFormatted), React.createElement(\"button\", {\n    onClick: props.running ? props.onStop : props.onStart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \" \"));\n});\nlet container = Redux.createStore(update); // Provider makes the react store available\n// Now react redux will take care of re-rendering our application when the state changes \n// When the Stopwatch component renders, its data supplied by the React-redux provider\n// mapping the store to the component via the mapStateToProps function\n\nReactDOM.render(React.createElement(ReactRedux.Provider, {\n  store: container,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n}, React.createElement(Stopwatch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n})), document.getElementById('root'));\nlet intents = {\n  TICK: \"TICK\",\n  START: \"START\",\n  STOP: \"STOP\",\n  RESET: \"RESET\"\n};\nrender();\nsetInterval(() => {\n  container.dispatch({\n    type: 'TICK'\n  });\n}, 1000);","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/index.js"],"names":["React","ReactDOM","createStore","connect","Redux","ReactRedux","model","running","time","update","action","updates","Object","assign","type","mapStateToProps","state","mapDispatchToProps","dispatch","onStart","onStop","Stopwatch","props","minutes","Math","floor","seconds","secondsFormatted","container","render","document","getElementById","intents","TICK","START","STOP","RESET","setInterval"],"mappings":"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","sourcesContent":["// React-redux is an extra module that helps with the integration of React and Redux\n// main service : connect React components to the application state\n// can provide data from the Redux store to components when the component is rendered and \n// it can provide a way for components to publish actions that can then be used to modify the Redux store\n// Provider : is a react COMPONENT provided by React-redux\n   // When it is included in a React application, it enables all React components below it in the component tree,\n   // that is its children or children's children to connect to the Redux store \n// connect : FUNCTION provided by React-redux that enhances React components connecting them to the Redux Store\n   // in the ways specified\n   // mapStateToProps : to specify what data from the Redux store should be provided to the React component\n                      // as props, connect expects a parameter called mapStateToProps\n                      // mapStateToProps is a function from the Redux store to a set of props for the component\n                      // took care of getting data from the store to the component\n   // mapDispatchTopProps : is a function that takes care of specifying \n                      // how the component can send actions to the Redux store\n                      // provides a place to map component events to Redux store actions\n\n// we will use react-redux to decouple react components from our Redux store\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux'\nimport * as Redux from 'redux';\nimport * as ReactRedux from 'react-redux';\n\nlet model = {\n   running : false,\n   time : 110\n};\n\n// reducer function\nconst update = (model = {running:false, time:0}, action) => {\n// React redux makes a performance optimization where before re-rendering the app\n// it firstly checks if the app state has changed at all\n// it does that by a reference equality check\n// Because this update function mutates the existing model object,\n// React-redux doesn't see that as a change to the app state, because it's still the same object\n// So, what we need to do is make sure that reducer function always returns a new object\n// if the app state has changed, and I can do it just providing an empty object\n    const updates = {\n       'START' : (model) => Object.assign({}, model, {running:true}),\n       'STOP' : (model) => Object.assign({}, model, {running:false}),\n       'TICK' : (model) => Object.assign({}, model, {time: model.time +(model.running ? 1 : 0)})\n    };\n\n    return (updates[action.type] || (() => model))(model);\n};\n\nfunction mapStateToProps(state){\n    // we need to think about what transformation we need from the Redux store to props for our component\n    // for this app, the answer is no transformation at all\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch){\n    // need to be able to modify the store\n    return {\n        onStart: () => { dispatch ({type: 'START'}); },\n        onStop: () => { dispatch ({type: 'STOP'}); }\n    };\n}\n\n// connect returns a function, and that function takes the react component as an argument,\n// because view is a React component we changed it with Stopwatch\n// only dependency of this component is props\n// mapping of those props to the Redux state is done via the React-redux connect function and \n// the mapStateToProps, mapDispatchToProps functions\nlet Stopwatch = ReactRedux.connect(mapStateToProps, mapDispatchToProps) ((props) => {\n   let minutes = Math.floor(props.time / 60);  \n   let seconds = props.time - (minutes * 60);\n   let secondsFormatted = `${seconds < 10 ? '0' : ''}${seconds}`;\n\n   return <div>\n     <p>{minutes}:{secondsFormatted}</p>\n     <button onClick={props.running ? props.onStop : props.onStart}> </button>\n    </div>\n});\n\nlet container = Redux.createStore(update);\n\n// Provider makes the react store available\n// Now react redux will take care of re-rendering our application when the state changes \n// When the Stopwatch component renders, its data supplied by the React-redux provider\n// mapping the store to the component via the mapStateToProps function\nReactDOM.render(\n<ReactRedux.Provider store={container}>\n    <Stopwatch />\n</ReactRedux.Provider>\n,\ndocument.getElementById('root'));\n\nlet intents = {\n    TICK : \"TICK\",\n    START : \"START\",\n    STOP : \"STOP\",\n    RESET : \"RESET\"\n}; \n\nrender();\n\nsetInterval(() => {\n container.dispatch({type:'TICK'});\n}, 1000);\n"]},"metadata":{},"sourceType":"module"}