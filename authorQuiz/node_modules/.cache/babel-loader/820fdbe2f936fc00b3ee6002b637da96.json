{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nlet model = {\n  running: false,\n  time: 110\n};\n\nlet view = model => {\n  let minutes = Math.floor(model.time / 60);\n  let seconds = model.time - minutes * 60;\n  let secondsFormatted = \"\".concat(seconds < 10 ? '0' : '').concat(seconds);\n\n  let handler = event => {\n    container.dispatch(model.running ? 'STOP' : 'START');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, minutes, \":\", secondsFormatted), React.createElement(\"button\", {\n    onClick: handler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \" \", model.running ? 'Stop' : 'Start', \" \"));\n};\n\nconst createStore = reducer => {\n  let internalState;\n  let handlers = [];\n  return {\n    // the reducer returns the new state\n    dispatch: intent => {\n      internalState = reducer(internalState, intent);\n      handlers.forEach(h => {\n        h();\n      });\n    },\n    subscribe: handler => {\n      handlers.push(handler);\n    },\n    getState: () => internalState\n  };\n};\n\nconst update = (model = {\n  running: false,\n  time: 0\n}, intent) => {\n  const updates = {\n    'START': model => Object.assign(model, {\n      running: true\n    }),\n    'STOP': model => Object.assign(model, {\n      running: false\n    }),\n    'TICK': model => Object.assign(model, {\n      time: model.time + (model.running ? 1 : 0)\n    })\n  };\n  return (updates[intent] || (() => model))(model);\n}; // to be able to create that container, because it needs to apply intents to our model,\n// that createStore function is going to need the update function\n\n\nlet container = createStore(update);\n\nconst render = () => {\n  ReactDOM.render(view(container.getState()), document.getElementById('root'));\n}; // subscribe a callback function to be called when the model changes\n// everytime my application state changes,\n// I want to call the render function to rerender UI from the current model and update the DOM\n// the change on the model triggers the subscribe callback handler\n\n\ncontainer.subscribe(render);\nlet intents = {\n  TICK: \"TICK\",\n  START: \"START\",\n  STOP: \"STOP\",\n  RESET: \"RESET\"\n};\nrender();\nsetInterval(() => {\n  container.dispatch('TICK');\n}, 1000); // State_2_Container","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/index.js"],"names":["React","ReactDOM","model","running","time","view","minutes","Math","floor","seconds","secondsFormatted","handler","event","container","dispatch","createStore","reducer","internalState","handlers","intent","forEach","h","subscribe","push","getState","update","updates","Object","assign","render","document","getElementById","intents","TICK","START","STOP","RESET","setInterval"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nlet model = {\n   running : false,\n   time : 110\n};\n\nlet view = (model) => {\n   let minutes = Math.floor(model.time / 60);  \n   let seconds = model.time - (minutes * 60);\n   let secondsFormatted = `${seconds < 10 ? '0' : ''}${seconds}`;\n   let handler = (event) => {\n       container.dispatch(model.running ? 'STOP' : 'START');\n    };\n\n   return <div>\n     <p>{minutes}:{secondsFormatted}</p>\n     <button onClick={handler}> {model.running ? 'Stop' : 'Start'} </button>\n    </div>\n};\n\nconst createStore = (reducer) => {\n   let internalState;\n   let handlers = [];\n   return {\n       // the reducer returns the new state\n      dispatch: (intent) => {\n          internalState = reducer(internalState, intent);\n          handlers.forEach(h => { h(); });\n      },\n      subscribe: (handler) => {\n          handlers.push(handler);\n      },\n      getState: () => internalState\n   };\n};\n\n\nconst update = (model = {running:false, time:0}, intent) => {\n\n    const updates = {\n       'START' : (model) => Object.assign(model, {running:true}),\n       'STOP' : (model) => Object.assign(model, {running:false}),\n       'TICK' : (model) => Object.assign(model, {time: model.time +(model.running ? 1 : 0)})\n    };\n\n    return (updates[intent] || (() => model))(model);\n};\n\n// to be able to create that container, because it needs to apply intents to our model,\n// that createStore function is going to need the update function\nlet container = createStore(update);\n\nconst render = () => {\n   ReactDOM.render(view(container.getState()), document.getElementById('root'));\n}\n\n// subscribe a callback function to be called when the model changes\n// everytime my application state changes,\n// I want to call the render function to rerender UI from the current model and update the DOM\n// the change on the model triggers the subscribe callback handler\ncontainer.subscribe(render);\n\nlet intents = {\n    TICK : \"TICK\",\n    START : \"START\",\n    STOP : \"STOP\",\n    RESET : \"RESET\"\n}; \n\nrender();\n\nsetInterval(() => {\n container.dispatch('TICK');\n}, 1000);\n\n// State_2_Container\n\n"]},"metadata":{},"sourceType":"module"}