{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/index.js\";\n// Redux is popular and quality state container in React \n// provides good basis for implementing the MVI architecture\n// Redux API :\n// createStore(reducer, initialState) : the function used to create a new store, which is \n// the container for our app state\n// to create a store the programmer supplies a reducer function and the initial store state\n// getState : returns the current app state from within the store\n// Actions = intent  and shoul be objects\n// dispacth : sends an action to the store to be applied to the current state\n// the action is processed by the reducer function which builds a new application state\n// subscribe : registers a callback to be called when the application state held within the store changes\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Redux from 'react-redux';\nlet model = {\n  running: false,\n  time: 110\n};\n\nlet view = m => {\n  let minutes = Math.floor(m.time / 60);\n  let seconds = m.time - minutes * 60;\n  let secondsFormatted = \"\".concat(seconds < 10 ? '0' : '').concat(seconds);\n\n  let handler = event => {\n    container.dispatch(m.running ? {\n      type: 'STOP'\n    } : {\n      type: 'START'\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, minutes, \":\", secondsFormatted), React.createElement(\"button\", {\n    onClick: handler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \" \", m.running ? 'Stop' : 'Start', \" \"));\n};\n\nconst update = (model = {\n  running: false,\n  time: 0\n}, action) => {\n  const updates = {\n    'START': model => Object.assign(model, {\n      running: true\n    }),\n    'STOP': model => Object.assign(model, {\n      running: false\n    }),\n    'TICK': model => Object.assign(model, {\n      time: model.time + (model.running ? 1 : 0)\n    })\n  };\n  return (updates[action.type] || (() => model))(model);\n};\n\nlet container = Redux.createStore(update);\n\nconst render = () => {\n  ReactDOM.render(view(container.getState()), document.getElementById('root'));\n};\n\ncontainer.subscribe(render);\nlet intents = {\n  TICK: \"TICK\",\n  START: \"START\",\n  STOP: \"STOP\",\n  RESET: \"RESET\"\n};\nrender();\nsetInterval(() => {\n  container.dispatch({\n    type: 'TICK'\n  });\n}, 1000);","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/index.js"],"names":["React","ReactDOM","Redux","model","running","time","view","m","minutes","Math","floor","seconds","secondsFormatted","handler","event","container","dispatch","type","update","action","updates","Object","assign","createStore","render","getState","document","getElementById","subscribe","intents","TICK","START","STOP","RESET","setInterval"],"mappings":";AAAA;AACA;AACA;AACA;AACG;AACH;AACA;AACA;AACA;AACG;AACH;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAIC,KAAK,GAAG;AACTC,EAAAA,OAAO,EAAG,KADD;AAETC,EAAAA,IAAI,EAAG;AAFE,CAAZ;;AAKA,IAAIC,IAAI,GAAIC,CAAD,IAAO;AACf,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACF,IAAF,GAAS,EAApB,CAAd;AACA,MAAIM,OAAO,GAAGJ,CAAC,CAACF,IAAF,GAAUG,OAAO,GAAG,EAAlC;AACA,MAAII,gBAAgB,aAAMD,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAA3B,SAAgCA,OAAhC,CAApB;;AACA,MAAIE,OAAO,GAAIC,KAAD,IAAW;AACrBC,IAAAA,SAAS,CAACC,QAAV,CAAmBT,CAAC,CAACH,OAAF,GAAY;AAACa,MAAAA,IAAI,EAAG;AAAR,KAAZ,GAA8B;AAACA,MAAAA,IAAI,EAAG;AAAR,KAAjD;AACF,GAFF;;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIT,OAAJ,OAAcI,gBAAd,CADK,EAEL;AAAQ,IAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA4BN,CAAC,CAACH,OAAF,GAAY,MAAZ,GAAqB,OAAjD,MAFK,CAAP;AAIF,CAZD;;AAeA,MAAMc,MAAM,GAAG,CAACf,KAAK,GAAG;AAACC,EAAAA,OAAO,EAAC,KAAT;AAAgBC,EAAAA,IAAI,EAAC;AAArB,CAAT,EAAkCc,MAAlC,KAA6C;AAExD,QAAMC,OAAO,GAAG;AACb,aAAWjB,KAAD,IAAWkB,MAAM,CAACC,MAAP,CAAcnB,KAAd,EAAqB;AAACC,MAAAA,OAAO,EAAC;AAAT,KAArB,CADR;AAEb,YAAUD,KAAD,IAAWkB,MAAM,CAACC,MAAP,CAAcnB,KAAd,EAAqB;AAACC,MAAAA,OAAO,EAAC;AAAT,KAArB,CAFP;AAGb,YAAUD,KAAD,IAAWkB,MAAM,CAACC,MAAP,CAAcnB,KAAd,EAAqB;AAACE,MAAAA,IAAI,EAAEF,KAAK,CAACE,IAAN,IAAaF,KAAK,CAACC,OAAN,GAAgB,CAAhB,GAAoB,CAAjC;AAAP,KAArB;AAHP,GAAhB;AAMA,SAAO,CAACgB,OAAO,CAACD,MAAM,CAACF,IAAR,CAAP,KAAyB,MAAMd,KAA/B,CAAD,EAAwCA,KAAxC,CAAP;AACH,CATD;;AAYA,IAAIY,SAAS,GAAGb,KAAK,CAACqB,WAAN,CAAkBL,MAAlB,CAAhB;;AAEA,MAAMM,MAAM,GAAG,MAAM;AAClBvB,EAAAA,QAAQ,CAACuB,MAAT,CAAgBlB,IAAI,CAACS,SAAS,CAACU,QAAV,EAAD,CAApB,EAA4CC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5C;AACF,CAFD;;AAIAZ,SAAS,CAACa,SAAV,CAAoBJ,MAApB;AAEA,IAAIK,OAAO,GAAG;AACVC,EAAAA,IAAI,EAAG,MADG;AAEVC,EAAAA,KAAK,EAAG,OAFE;AAGVC,EAAAA,IAAI,EAAG,MAHG;AAIVC,EAAAA,KAAK,EAAG;AAJE,CAAd;AAOAT,MAAM;AAENU,WAAW,CAAC,MAAM;AACjBnB,EAAAA,SAAS,CAACC,QAAV,CAAmB;AAACC,IAAAA,IAAI,EAAC;AAAN,GAAnB;AACA,CAFU,EAER,IAFQ,CAAX","sourcesContent":["// Redux is popular and quality state container in React \n// provides good basis for implementing the MVI architecture\n// Redux API :\n// createStore(reducer, initialState) : the function used to create a new store, which is \n   // the container for our app state\n// to create a store the programmer supplies a reducer function and the initial store state\n// getState : returns the current app state from within the store\n// Actions = intent  and shoul be objects\n// dispacth : sends an action to the store to be applied to the current state\n   // the action is processed by the reducer function which builds a new application state\n// subscribe : registers a callback to be called when the application state held within the store changes\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Redux from 'react-redux';\n\nlet model = {\n   running : false,\n   time : 110\n};\n\nlet view = (m) => {\n   let minutes = Math.floor(m.time / 60);  \n   let seconds = m.time - (minutes * 60);\n   let secondsFormatted = `${seconds < 10 ? '0' : ''}${seconds}`;\n   let handler = (event) => {\n       container.dispatch(m.running ? {type : 'STOP'} : {type : 'START'});\n    };\n\n   return <div>\n     <p>{minutes}:{secondsFormatted}</p>\n     <button onClick={handler}> {m.running ? 'Stop' : 'Start'} </button>\n    </div>\n};\n\n\nconst update = (model = {running:false, time:0}, action) => {\n\n    const updates = {\n       'START' : (model) => Object.assign(model, {running:true}),\n       'STOP' : (model) => Object.assign(model, {running:false}),\n       'TICK' : (model) => Object.assign(model, {time: model.time +(model.running ? 1 : 0)})\n    };\n\n    return (updates[action.type] || (() => model))(model);\n};\n\n\nlet container = Redux.createStore(update);\n\nconst render = () => {\n   ReactDOM.render(view(container.getState()), document.getElementById('root'));\n}\n\ncontainer.subscribe(render);\n\nlet intents = {\n    TICK : \"TICK\",\n    START : \"START\",\n    STOP : \"STOP\",\n    RESET : \"RESET\"\n}; \n\nrender();\n\nsetInterval(() => {\n container.dispatch({type:'TICK'});\n}, 1000);\n\n\n"]},"metadata":{},"sourceType":"module"}