{"ast":null,"code":"var _jsxFileName = \"/Users/meltemayyildiz/jsdev/authorquiz/src/AddAuthorForm.js\";\nimport React from 'react';\nimport \"./AddAuthorForm.css\"; // and the webpack setup in createReactApp will pick up that CSS import, do some magic, and make it all work\n\nclass AuthorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      imageUrl: '' // What this does is it guarantees that no matter how onFieldChange is called,\n      // the value of this within the method will be the same as the value of this within the constructor\n\n    };\n    this.onFieldChange = this.onFieldChange.bind(this); // must be binded in constructor other way we get Cannot read property 'props' of undefined error\n    // this.props.onAddAuthor(this.state);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    // stop the form from being submitted\n    event.preventDefault();\n    this.props.onAddAuthor(this.state);\n  }\n\n  onFieldChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"AddAuthorForm__input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      value: this.state.name,\n      onChange: this.onFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"AddAuthorForm__input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"imageUrl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Image URL\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"imageUrl\",\n      value: this.state.imageUrl,\n      onChange: this.onFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n} // for is reserved js word, so htmlFor is used in jsx\n\n\nfunction AddAuthorForm({\n  match,\n  onAddAuthor\n}) {\n  return React.createElement(\"div\", {\n    className: \"AddAuthorForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Add Author\"), React.createElement(AuthorForm, {\n    onAddAuthor: onAddAuthor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n}\n\nexport default AddAuthorForm;","map":{"version":3,"sources":["/Users/meltemayyildiz/jsdev/authorquiz/src/AddAuthorForm.js"],"names":["React","AuthorForm","Component","constructor","props","state","name","imageUrl","onFieldChange","bind","handleSubmit","event","preventDefault","onAddAuthor","setState","target","value","render","AddAuthorForm","match"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP,C,CACA;;AAGA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAG,EADE;AAETC,MAAAA,QAAQ,EAAE,EAFD,CAKb;AACA;;AANa,KAAb;AAOA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB,CATc,CAWd;AACA;;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDC,EAAAA,YAAY,CAACC,KAAD,EAAO;AACf;AACCA,IAAAA,KAAK,CAACC,cAAN;AACA,SAAKR,KAAL,CAAWS,WAAX,CAAuB,KAAKR,KAA5B;AACJ;;AAEDG,EAAAA,aAAa,CAACG,KAAD,EAAO;AAChB,SAAKG,QAAL,CAAc;AACX,OAACH,KAAK,CAACI,MAAN,CAAaT,IAAd,GAAqBK,KAAK,CAACI,MAAN,CAAaC;AADvB,KAAd;AAGH;;AAEDC,EAAAA,MAAM,GAAE;AACP,WAAO;AAAM,MAAA,QAAQ,EAAE,KAAKP,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,IAAjD;AAAuD,MAAA,QAAQ,EAAE,KAAKE,aAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADH,EAKG;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAmC,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWE,QAArD;AAA+D,MAAA,QAAQ,EAAE,KAAKC,aAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CALH,EASG;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATH,CAAP;AAWA;;AA1CmC,C,CA8CxC;;;AACA,SAASU,aAAT,CAAuB;AAACC,EAAAA,KAAD;AAAQN,EAAAA;AAAR,CAAvB,EAA4C;AACxC,SAAO;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEA,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAEA,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAAP;AAIH;;AAED,eAAeK,aAAf","sourcesContent":["import React from 'react';\nimport \"./AddAuthorForm.css\";\n// and the webpack setup in createReactApp will pick up that CSS import, do some magic, and make it all work\n\n\nclass AuthorForm extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            name : '',\n            imageUrl: ''\n        }\n\n        // What this does is it guarantees that no matter how onFieldChange is called,\n        // the value of this within the method will be the same as the value of this within the constructor\n        this.onFieldChange = this.onFieldChange.bind(this);\n\n        // must be binded in constructor other way we get Cannot read property 'props' of undefined error\n        // this.props.onAddAuthor(this.state);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event){\n        // stop the form from being submitted\n         event.preventDefault();\n         this.props.onAddAuthor(this.state);\n    }\n\n    onFieldChange(event){\n        this.setState({\n           [event.target.name]: event.target.value\n        });\n    }\n\n    render(){\n     return <form onSubmit={this.handleSubmit}>\n               <div className=\"AddAuthorForm__input\">\n                   <label htmlFor=\"name\">Name</label>\n                   <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange}/>\n               </div>\n               <div className=\"AddAuthorForm__input\">\n                   <label htmlFor=\"imageUrl\">Image URL</label>\n                   <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange}/>\n               </div>\n               <input type=\"submit\" value=\"Add\"/>\n     </form>;\n    }\n}\n\n\n// for is reserved js word, so htmlFor is used in jsx\nfunction AddAuthorForm({match, onAddAuthor}){\n    return <div className=\"AddAuthorForm\">\n           <h1>Add Author</h1>\n           <AuthorForm onAddAuthor={onAddAuthor}/>\n        </div>;\n}\n\nexport default AddAuthorForm;"]},"metadata":{},"sourceType":"module"}